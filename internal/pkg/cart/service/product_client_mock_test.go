// Code generated by http://github.com/gojuno/minimock (v3.4.7). DO NOT EDIT.

package service

//go:generate minimock -i ProductCartService/internal/pkg/cart/service.ProductClient -o product_client_mock_test.go -n ProductClientMock -p service

import (
	"ProductCartService/internal/pkg/cart/productClient"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductClientMock implements ProductClient
type ProductClientMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetProductInfo          func(sku int64) (ip1 *productClient.Item, err error)
	funcGetProductInfoOrigin    string
	inspectFuncGetProductInfo   func(sku int64)
	afterGetProductInfoCounter  uint64
	beforeGetProductInfoCounter uint64
	GetProductInfoMock          mProductClientMockGetProductInfo
}

// NewProductClientMock returns a mock for ProductClient
func NewProductClientMock(t minimock.Tester) *ProductClientMock {
	m := &ProductClientMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductInfoMock = mProductClientMockGetProductInfo{mock: m}
	m.GetProductInfoMock.callArgs = []*ProductClientMockGetProductInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductClientMockGetProductInfo struct {
	optional           bool
	mock               *ProductClientMock
	defaultExpectation *ProductClientMockGetProductInfoExpectation
	expectations       []*ProductClientMockGetProductInfoExpectation

	callArgs []*ProductClientMockGetProductInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductClientMockGetProductInfoExpectation specifies expectation struct of the ProductClient.GetProductInfo
type ProductClientMockGetProductInfoExpectation struct {
	mock               *ProductClientMock
	params             *ProductClientMockGetProductInfoParams
	paramPtrs          *ProductClientMockGetProductInfoParamPtrs
	expectationOrigins ProductClientMockGetProductInfoExpectationOrigins
	results            *ProductClientMockGetProductInfoResults
	returnOrigin       string
	Counter            uint64
}

// ProductClientMockGetProductInfoParams contains parameters of the ProductClient.GetProductInfo
type ProductClientMockGetProductInfoParams struct {
	sku int64
}

// ProductClientMockGetProductInfoParamPtrs contains pointers to parameters of the ProductClient.GetProductInfo
type ProductClientMockGetProductInfoParamPtrs struct {
	sku *int64
}

// ProductClientMockGetProductInfoResults contains results of the ProductClient.GetProductInfo
type ProductClientMockGetProductInfoResults struct {
	ip1 *productClient.Item
	err error
}

// ProductClientMockGetProductInfoOrigins contains origins of expectations of the ProductClient.GetProductInfo
type ProductClientMockGetProductInfoExpectationOrigins struct {
	origin    string
	originSku string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProductInfo *mProductClientMockGetProductInfo) Optional() *mProductClientMockGetProductInfo {
	mmGetProductInfo.optional = true
	return mmGetProductInfo
}

// Expect sets up expected params for ProductClient.GetProductInfo
func (mmGetProductInfo *mProductClientMockGetProductInfo) Expect(sku int64) *mProductClientMockGetProductInfo {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductClientMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductClientMockGetProductInfoExpectation{}
	}

	if mmGetProductInfo.defaultExpectation.paramPtrs != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductClientMock.GetProductInfo mock is already set by ExpectParams functions")
	}

	mmGetProductInfo.defaultExpectation.params = &ProductClientMockGetProductInfoParams{sku}
	mmGetProductInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetProductInfo.expectations {
		if minimock.Equal(e.params, mmGetProductInfo.defaultExpectation.params) {
			mmGetProductInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductInfo.defaultExpectation.params)
		}
	}

	return mmGetProductInfo
}

// ExpectSkuParam1 sets up expected param sku for ProductClient.GetProductInfo
func (mmGetProductInfo *mProductClientMockGetProductInfo) ExpectSkuParam1(sku int64) *mProductClientMockGetProductInfo {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductClientMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductClientMockGetProductInfoExpectation{}
	}

	if mmGetProductInfo.defaultExpectation.params != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductClientMock.GetProductInfo mock is already set by Expect")
	}

	if mmGetProductInfo.defaultExpectation.paramPtrs == nil {
		mmGetProductInfo.defaultExpectation.paramPtrs = &ProductClientMockGetProductInfoParamPtrs{}
	}
	mmGetProductInfo.defaultExpectation.paramPtrs.sku = &sku
	mmGetProductInfo.defaultExpectation.expectationOrigins.originSku = minimock.CallerInfo(1)

	return mmGetProductInfo
}

// Inspect accepts an inspector function that has same arguments as the ProductClient.GetProductInfo
func (mmGetProductInfo *mProductClientMockGetProductInfo) Inspect(f func(sku int64)) *mProductClientMockGetProductInfo {
	if mmGetProductInfo.mock.inspectFuncGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("Inspect function is already set for ProductClientMock.GetProductInfo")
	}

	mmGetProductInfo.mock.inspectFuncGetProductInfo = f

	return mmGetProductInfo
}

// Return sets up results that will be returned by ProductClient.GetProductInfo
func (mmGetProductInfo *mProductClientMockGetProductInfo) Return(ip1 *productClient.Item, err error) *ProductClientMock {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductClientMock.GetProductInfo mock is already set by Set")
	}

	if mmGetProductInfo.defaultExpectation == nil {
		mmGetProductInfo.defaultExpectation = &ProductClientMockGetProductInfoExpectation{mock: mmGetProductInfo.mock}
	}
	mmGetProductInfo.defaultExpectation.results = &ProductClientMockGetProductInfoResults{ip1, err}
	mmGetProductInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetProductInfo.mock
}

// Set uses given function f to mock the ProductClient.GetProductInfo method
func (mmGetProductInfo *mProductClientMockGetProductInfo) Set(f func(sku int64) (ip1 *productClient.Item, err error)) *ProductClientMock {
	if mmGetProductInfo.defaultExpectation != nil {
		mmGetProductInfo.mock.t.Fatalf("Default expectation is already set for the ProductClient.GetProductInfo method")
	}

	if len(mmGetProductInfo.expectations) > 0 {
		mmGetProductInfo.mock.t.Fatalf("Some expectations are already set for the ProductClient.GetProductInfo method")
	}

	mmGetProductInfo.mock.funcGetProductInfo = f
	mmGetProductInfo.mock.funcGetProductInfoOrigin = minimock.CallerInfo(1)
	return mmGetProductInfo.mock
}

// When sets expectation for the ProductClient.GetProductInfo which will trigger the result defined by the following
// Then helper
func (mmGetProductInfo *mProductClientMockGetProductInfo) When(sku int64) *ProductClientMockGetProductInfoExpectation {
	if mmGetProductInfo.mock.funcGetProductInfo != nil {
		mmGetProductInfo.mock.t.Fatalf("ProductClientMock.GetProductInfo mock is already set by Set")
	}

	expectation := &ProductClientMockGetProductInfoExpectation{
		mock:               mmGetProductInfo.mock,
		params:             &ProductClientMockGetProductInfoParams{sku},
		expectationOrigins: ProductClientMockGetProductInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetProductInfo.expectations = append(mmGetProductInfo.expectations, expectation)
	return expectation
}

// Then sets up ProductClient.GetProductInfo return parameters for the expectation previously defined by the When method
func (e *ProductClientMockGetProductInfoExpectation) Then(ip1 *productClient.Item, err error) *ProductClientMock {
	e.results = &ProductClientMockGetProductInfoResults{ip1, err}
	return e.mock
}

// Times sets number of times ProductClient.GetProductInfo should be invoked
func (mmGetProductInfo *mProductClientMockGetProductInfo) Times(n uint64) *mProductClientMockGetProductInfo {
	if n == 0 {
		mmGetProductInfo.mock.t.Fatalf("Times of ProductClientMock.GetProductInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProductInfo.expectedInvocations, n)
	mmGetProductInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetProductInfo
}

func (mmGetProductInfo *mProductClientMockGetProductInfo) invocationsDone() bool {
	if len(mmGetProductInfo.expectations) == 0 && mmGetProductInfo.defaultExpectation == nil && mmGetProductInfo.mock.funcGetProductInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProductInfo.mock.afterGetProductInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProductInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProductInfo implements ProductClient
func (mmGetProductInfo *ProductClientMock) GetProductInfo(sku int64) (ip1 *productClient.Item, err error) {
	mm_atomic.AddUint64(&mmGetProductInfo.beforeGetProductInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductInfo.afterGetProductInfoCounter, 1)

	mmGetProductInfo.t.Helper()

	if mmGetProductInfo.inspectFuncGetProductInfo != nil {
		mmGetProductInfo.inspectFuncGetProductInfo(sku)
	}

	mm_params := ProductClientMockGetProductInfoParams{sku}

	// Record call args
	mmGetProductInfo.GetProductInfoMock.mutex.Lock()
	mmGetProductInfo.GetProductInfoMock.callArgs = append(mmGetProductInfo.GetProductInfoMock.callArgs, &mm_params)
	mmGetProductInfo.GetProductInfoMock.mutex.Unlock()

	for _, e := range mmGetProductInfo.GetProductInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1, e.results.err
		}
	}

	if mmGetProductInfo.GetProductInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductInfo.GetProductInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductInfo.GetProductInfoMock.defaultExpectation.params
		mm_want_ptrs := mmGetProductInfo.GetProductInfoMock.defaultExpectation.paramPtrs

		mm_got := ProductClientMockGetProductInfoParams{sku}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.sku != nil && !minimock.Equal(*mm_want_ptrs.sku, mm_got.sku) {
				mmGetProductInfo.t.Errorf("ProductClientMock.GetProductInfo got unexpected parameter sku, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProductInfo.GetProductInfoMock.defaultExpectation.expectationOrigins.originSku, *mm_want_ptrs.sku, mm_got.sku, minimock.Diff(*mm_want_ptrs.sku, mm_got.sku))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductInfo.t.Errorf("ProductClientMock.GetProductInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetProductInfo.GetProductInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductInfo.GetProductInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductInfo.t.Fatal("No results are set for the ProductClientMock.GetProductInfo")
		}
		return (*mm_results).ip1, (*mm_results).err
	}
	if mmGetProductInfo.funcGetProductInfo != nil {
		return mmGetProductInfo.funcGetProductInfo(sku)
	}
	mmGetProductInfo.t.Fatalf("Unexpected call to ProductClientMock.GetProductInfo. %v", sku)
	return
}

// GetProductInfoAfterCounter returns a count of finished ProductClientMock.GetProductInfo invocations
func (mmGetProductInfo *ProductClientMock) GetProductInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInfo.afterGetProductInfoCounter)
}

// GetProductInfoBeforeCounter returns a count of ProductClientMock.GetProductInfo invocations
func (mmGetProductInfo *ProductClientMock) GetProductInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductInfo.beforeGetProductInfoCounter)
}

// Calls returns a list of arguments used in each call to ProductClientMock.GetProductInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductInfo *mProductClientMockGetProductInfo) Calls() []*ProductClientMockGetProductInfoParams {
	mmGetProductInfo.mutex.RLock()

	argCopy := make([]*ProductClientMockGetProductInfoParams, len(mmGetProductInfo.callArgs))
	copy(argCopy, mmGetProductInfo.callArgs)

	mmGetProductInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductInfoDone returns true if the count of the GetProductInfo invocations corresponds
// the number of defined expectations
func (m *ProductClientMock) MinimockGetProductInfoDone() bool {
	if m.GetProductInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductInfoMock.invocationsDone()
}

// MinimockGetProductInfoInspect logs each unmet expectation
func (m *ProductClientMock) MinimockGetProductInfoInspect() {
	for _, e := range m.GetProductInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductClientMock.GetProductInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetProductInfoCounter := mm_atomic.LoadUint64(&m.afterGetProductInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductInfoMock.defaultExpectation != nil && afterGetProductInfoCounter < 1 {
		if m.GetProductInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductClientMock.GetProductInfo at\n%s", m.GetProductInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductClientMock.GetProductInfo at\n%s with params: %#v", m.GetProductInfoMock.defaultExpectation.expectationOrigins.origin, *m.GetProductInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductInfo != nil && afterGetProductInfoCounter < 1 {
		m.t.Errorf("Expected call to ProductClientMock.GetProductInfo at\n%s", m.funcGetProductInfoOrigin)
	}

	if !m.GetProductInfoMock.invocationsDone() && afterGetProductInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductClientMock.GetProductInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductInfoMock.expectedInvocations), m.GetProductInfoMock.expectedInvocationsOrigin, afterGetProductInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductClientMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetProductInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductInfoDone()
}
